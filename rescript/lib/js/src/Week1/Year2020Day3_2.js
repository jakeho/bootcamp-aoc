// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Js_math = require("rescript/lib/js/js_math.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_int32 = require("rescript/lib/js/caml_int32.js");

var input = Fs.readFileSync("input/Week1/Year2020Day3.txt", "utf8");

function parser(str) {
  return str.trim().split("\n");
}

function contains(str, index, $$char) {
  if (str.length === 0 || index < 0 || index > str.length || $$char === "") {
    return false;
  } else {
    return str.charAt(index) === $$char;
  }
}

function executor(arr, param) {
  var y = param[1];
  var x = param[0];
  return Belt_Array.reduceWithIndex(arr, 0.0, (function (matchCnt, item, index) {
                if (index > 0 && Caml_int32.mod_(index, y) === 0 && contains(item, Caml_int32.mod_(Math.imul(x, Js_math.floor_int(Caml_int32.div(index, y))), item.length), "#")) {
                  return matchCnt + 1.0;
                } else {
                  return matchCnt;
                }
              }));
}

var parsedInput = input.trim().split("\n");

console.log(executor(parsedInput, [
          3,
          1
        ]));

var coords = [
  [
    1,
    1
  ],
  [
    3,
    1
  ],
  [
    5,
    1
  ],
  [
    7,
    1
  ],
  [
    1,
    2
  ]
];

function multiplyResults(input, coordTuples) {
  return Belt_Array.reduce(coordTuples, 1, (function (sum, coord) {
                return sum * executor(input, coord);
              }));
}

console.log(multiplyResults(parsedInput, coords));

exports.input = input;
exports.parser = parser;
exports.contains = contains;
exports.executor = executor;
exports.parsedInput = parsedInput;
exports.coords = coords;
exports.multiplyResults = multiplyResults;
/* input Not a pure module */
