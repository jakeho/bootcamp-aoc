// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_math = require("rescript/lib/js/js_math.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Belt_SortArrayInt = require("rescript/lib/js/belt_SortArrayInt.js");
var Year2020Day5Input = require("./Year2020Day5Input.js");

var boardingPasses = Year2020Day5Input.y2020d5.trim().split("\n");

function getRowDirections(str) {
  return Belt_Array.slice(str.split(""), 0, 7);
}

function getSeatDirections(str) {
  return Belt_Array.sliceToEnd(str.split(""), 7);
}

function searchWithin(directions) {
  var min = {
    contents: 0
  };
  var max = {
    contents: Math.pow(2.0, directions.length) - 1.0 | 0
  };
  Belt_Array.forEach(directions, (function (d) {
          if (d === "F" || d === "L") {
            max.contents = max.contents - Js_math.ceil_int((max.contents - min.contents | 0) / 2.0) | 0;
            return ;
          } else if (d === "B" || d === "R") {
            min.contents = min.contents + Js_math.ceil_int((max.contents - min.contents | 0) / 2.0) | 0;
            return ;
          } else {
            return ;
          }
        }));
  if (min.contents === max.contents) {
    return max.contents;
  } else {
    return 0;
  }
}

function search(directions, _left, _right) {
  while(true) {
    var right = _right;
    var left = _left;
    if (left === right) {
      return left | 0;
    }
    var direction = Belt_Option.getWithDefault(Belt_Array.get(directions, 0), "");
    var diff = right - left;
    if (direction === "F" || direction === "L") {
      directions.shift();
      _right = right - Math.ceil(diff / 2.0);
      continue ;
    }
    if (!(direction === "B" || direction === "R")) {
      return -1;
    }
    directions.shift();
    _left = left + Math.ceil(diff / 2.0);
    continue ;
  };
}

function searchWithin2(directions) {
  var right = Math.pow(2, directions.length) - 1;
  return search(directions, 0, right);
}

var seatIds = Belt_SortArrayInt.stableSort(Belt_Array.map(boardingPasses, (function (pass) {
            var row = searchWithin2(getRowDirections(pass));
            var col = searchWithin2(getSeatDirections(pass));
            return (row << 3) + col | 0;
          })));

console.log(Belt_Array.get(seatIds, boardingPasses.length - 1 | 0), "is the highest ID from the list");

function findMySeat(ids) {
  var prevSeatIdx = ids.findIndex(function (id) {
        return !ids.includes(id + 1 | 0);
      });
  if (prevSeatIdx < 0) {
    return -1;
  }
  var mySeatId = Belt_Option.getWithDefault(Belt_Array.get(ids, prevSeatIdx), -1);
  if (mySeatId > 0) {
    return mySeatId + 1 | 0;
  } else {
    return -1;
  }
}

function findPrevSeat(ids) {
  return Caml_option.undefined_to_opt(ids.find(function (id) {
                  return !ids.includes(id + 1 | 0);
                }));
}

function findEmptySeat(prevSeat) {
  if (prevSeat !== undefined) {
    return prevSeat + 1 | 0;
  } else {
    return -1;
  }
}

console.log(findEmptySeat(findPrevSeat(seatIds)), "is my seat");

exports.boardingPasses = boardingPasses;
exports.getRowDirections = getRowDirections;
exports.getSeatDirections = getSeatDirections;
exports.searchWithin = searchWithin;
exports.search = search;
exports.searchWithin2 = searchWithin2;
exports.seatIds = seatIds;
exports.findMySeat = findMySeat;
exports.findPrevSeat = findPrevSeat;
exports.findEmptySeat = findEmptySeat;
/* boardingPasses Not a pure module */
